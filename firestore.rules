rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ユーザーが認証されているかチェック
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // ユーザーが自分のデータにアクセスしているかチェック
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // collectionGroupクエリのルール
    // メモのサブコレクションに対するcollectionGroupクエリを許可
    match /{path=**}/memos/{memoId} {
      // 読み取り: メモのuserIdが自分のものの場合
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    // booksコレクションのルール
    match /books/{bookId} {
      // 読み取り: 自分の書籍のみ
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      
      // 作成: 認証済みユーザーのみ、自分のuserIdで作成
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      
      // 更新: 自分の書籍のみ
      allow update: if isAuthenticated() && isOwner(resource.data.userId);
      
      // 削除: 自分の書籍のみ
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
      
      // メモのサブコレクション
      match /memos/{memoId} {
        // 読み取り: 親の書籍にアクセス権限がある場合
        allow read: if isAuthenticated() && isOwner(get(/databases/$(database)/documents/books/$(bookId)).data.userId);
        
        // 作成: 親の書籍にアクセス権限がある場合
        allow create: if isAuthenticated() && isOwner(get(/databases/$(database)/documents/books/$(bookId)).data.userId);
        
        // 更新: 親の書籍にアクセス権限がある場合
        allow update: if isAuthenticated() && isOwner(get(/databases/$(database)/documents/books/$(bookId)).data.userId);
        
        // 削除: 親の書籍にアクセス権限がある場合
        allow delete: if isAuthenticated() && isOwner(get(/databases/$(database)/documents/books/$(bookId)).data.userId);
      }
      
      // ステータス履歴のサブコレクション
      match /statusHistory/{historyId} {
        // 書籍の所有者のみがアクセス可能
        allow read, write: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/books/$(bookId)).data.userId;
        allow create: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/books/$(bookId)).data.userId;
      }
    }
    
    // ユーザー固有のデータ
    match /users/{userId} {
      // ユーザーが自分のデータにアクセスしているかチェック
      allow read, write: if isAuthenticated() && isOwner(userId);
      
      // タグ履歴のサブコレクション
      match /bookTagHistory/{tagId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
      
      match /memoTagHistory/{tagId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
    }
  }
} 